---
# Include variables and define needed variables
- name: include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: define postgresql packages
  set_fact:
    postgresql_packages: "{{ __postgresql_packages | list }}"
  when: postgresql_packages is not defined

- name: define dependencies packages
  set_fact:
    dependencies_packages: "{{ __dependencies_packages | list }}"
  when: dependencies_packages is not defined

- name: define web backend packages
  set_fact:
    web_backend_packages: "{{ __web_backend_packages | list }}"
  when: web_backend_packages is not defined

# Install and setup tasks
- include: "setup-{{ ansible_os_family }}.yml"
  static: no

# Create database and its user
- name: create postgresql database
  postgresql_db:
    name: "{{ netbox_database }}"
  become: true
  become_method: "{{ become_method_to_use }}"
  become_user: "{{ postgresql_user }}"

- name: create postgresql user
  postgresql_user:
    name: "{{ netbox_database_user }}"
    password: "{{ netbox_database_password }}"
    db: "{{ netbox_database }}"
    priv: ALL
  become: true
  become_method: "{{ become_method_to_use }}"
  become_user: "{{ postgresql_user }}"

# Setup Netbox
- name: check if there is a netbox install
  stat:
    path: "{{ netbox_install_directory }}"
  register: netbox_installed

- name: download netbox using git
  git:
    repo: "{{ netbox_git_url }}"
    version: "{{ netbox_version }}"
    dest: "{{ netbox_install_directory }}"
  when: not netbox_installed.stat.exists
  register: netbox_downloaded

- name: install python requirements
  pip:
    requirements: "{{ netbox_install_directory }}/requirements.txt"
    extra_args: "--upgrade"
  when: netbox_downloaded.changed

- name: configure netbox
  template:
    src: configuration.py.j2
    dest: "{{ netbox_install_directory }}/netbox/netbox/configuration.py"
    owner: root
    group: root
    mode: 0644

- name: perform database migration
  django_manage:
    app_path: "{{ netbox_install_directory }}/netbox"
    command: migrate
  when: netbox_downloaded.changed

- name: create super user
  django_manage:
    app_path: "{{ netbox_install_directory }}/netbox"
    command: "createsuperuser --noinput --username={{ netbox_superuser_username }} --email={{ netbox_superuser_email }}"
  when: not netbox_installed.stat.exists

- name: collect static files
  django_manage:
    app_path: "{{ netbox_install_directory }}/netbox"
    command: collectstatic
  when: netbox_downloaded.changed

- name: load initial data
  django_manage:
    app_path: "{{ netbox_install_directory }}/netbox"
    command: loaddata
    fixtures: initial_data
  when: not netbox_installed.stat.exists and netbox_load_initial_data

# Setup web backend if enabled
- name: configure gunicorn
  template:
    src: gunicorn_config.py.j2
    dest: "{{ netbox_install_directory }}/gunicorn_config.py"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart supervisor
  when: netbox_setup_web_backend

- name: configure supervisor
  template:
    src: netbox.conf.j2
    dest: "{{ supervisord_config_directory }}/netbox.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart supervisor
  when: netbox_setup_web_backend
